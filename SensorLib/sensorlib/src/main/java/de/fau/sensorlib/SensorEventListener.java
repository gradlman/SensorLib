/*
 * Copyright (C) 2018 Machine Learning and Data Analytics Lab, Friedrich-Alexander-Universität Erlangen-Nürnberg (FAU).
 * <p>
 * This file is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. If you reuse
 * this code you have to keep or cite this comment.
 */
package de.fau.sensorlib;

import de.fau.sensorlib.enums.SensorMessage;
import de.fau.sensorlib.enums.SensorState;
import de.fau.sensorlib.sensors.AbstractSensor;

/**
 * Callback for events generated by the {@link SensorEventGenerator}.
 */
public interface SensorEventListener {

    /**
     * Called when the sensor state changed.
     *
     * @param sensor The sensor whose state changed. null when the global state of all attached sensors changed (e.g. all sensors are connected now).
     * @param state  The new sensor state.
     */
    void onSensorStateChange(AbstractSensor sensor, SensorState state);

    /**
     * Called when the sensor issued a message.
     *
     * @param sensor  The sensor who issued a message.
     * @param message The sensor message.
     */
    void onSensorMessage(AbstractSensor sensor, SensorMessage message);

}
